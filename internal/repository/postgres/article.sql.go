// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: article.sql

package postgres

import (
	"context"
	"time"
)

const createArticle = `-- name: CreateArticle :exec
INSERT INTO article(title, content, author_id) VALUES ($1, $2, $3) RETURNING id, title, content, author_id, updated_at, created_at
`

type CreateArticleParams struct {
	Title    string
	Content  string
	AuthorID *int32
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) error {
	_, err := q.db.Exec(ctx, createArticle, arg.Title, arg.Content, arg.AuthorID)
	return err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM article
WHERE
  id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteArticle, id)
	return err
}

const getArticleByID = `-- name: GetArticleByID :one
SELECT
  id, title, content, author_id, updated_at, created_at
FROM
  article
WHERE
  id = $1
`

func (q *Queries) GetArticleByID(ctx context.Context, id int32) (Article, error) {
	row := q.db.QueryRow(ctx, getArticleByID, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getArticleByTitle = `-- name: GetArticleByTitle :one
SELECT
  id, title, content, author_id, updated_at, created_at
FROM
  article
WHERE
  title LIKE $1
LIMIT
  1
`

func (q *Queries) GetArticleByTitle(ctx context.Context, title string) (Article, error) {
	row := q.db.QueryRow(ctx, getArticleByTitle, title)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT
  id, title, content, author_id, updated_at, created_at
FROM
  article
WHERE
  created_at > $1::timestamptz
ORDER BY
  created_at
LIMIT
  $2
`

type ListArticlesParams struct {
	Cursor time.Time
	Limit  int64
}

func (q *Queries) ListArticles(ctx context.Context, arg ListArticlesParams) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticles, arg.Cursor, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :exec
UPDATE article
SET
  title = coalesce($1, title),
  content = coalesce($2, content)
WHERE
  id = $3
`

type UpdateArticleParams struct {
	Title   *string
	Content *string
	ID      int32
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) error {
	_, err := q.db.Exec(ctx, updateArticle, arg.Title, arg.Content, arg.ID)
	return err
}
