// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: batch.go

package postgres

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createArticle = `-- name: CreateArticle :batchexec
INSERT INTO article(title, content, author_id) VALUES ($1, $2, $3) RETURNING id, title, content, author_id, updated_at, created_at
`

type CreateArticleBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateArticleParams struct {
	Title    string
	Content  string
	AuthorID pgtype.Int4
}

func (q *Queries) CreateArticle(ctx context.Context, arg []CreateArticleParams) *CreateArticleBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Title,
			a.Content,
			a.AuthorID,
		}
		batch.Queue(createArticle, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateArticleBatchResults{br, len(arg), false}
}

func (b *CreateArticleBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateArticleBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
